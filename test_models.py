#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π NDVI
===============================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.
"""

import os
import json
import warnings
from typing import Dict, Tuple, Any, Optional
from datetime import datetime, timedelta

import numpy as np
import pandas as pd
import torch
import plotly.graph_objects as go
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from ndvi_ts_lstm import NDVIForecaster, DataManager, LSTMModel, ModelConfig

warnings.filterwarnings("ignore")

# ===================== –ö–û–ù–°–¢–ê–ù–¢–´ =====================
DEFAULT_CONFIG_PATH = "configs/config_ndvi.json"
OUTPUT_DIR = "results"
ORIGINAL_WEIGHTS_PATH = "weights/model_weights_original.pth"
FILTERED_WEIGHTS_PATH = "weights/model_weights_filtered.pth" 
FORECAST_STEP_DAYS = 5

# ===================== –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø =====================

class NDVIModelTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ NDVI."""
    
    def __init__(self, config_path: str = DEFAULT_CONFIG_PATH):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –º–æ–¥–µ–ª–∏.
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.config = self._load_config(config_path)
        self.forecaster: Optional[NDVIForecaster] = None
        self.data_manager: Optional[DataManager] = None
        self._ensure_output_dir()
        self._validate_config()
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        try:
            with open(config_path, "r", encoding="utf-8") as f:
                return json.load(f)
        except FileNotFoundError:
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except json.JSONDecodeError:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ —Ñ–∞–π–ª–µ {config_path}")
    
    def _ensure_output_dir(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
        os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    def _validate_config(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        required_params = [
            "coordinates", "n_steps_in", "n_steps_out", "test_start_date", "test_end_date"
        ]
        
        for param in required_params:
            if param not in self.config:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {param}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        test_start = self.config["test_start_date"]
        test_end = self.config["test_end_date"]
        
        print(f"‚úì –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {test_start} - {test_end}")
        
        total_forecast_days = self.config['n_steps_out'] * FORECAST_STEP_DAYS
        print(f"‚úì –ü—Ä–æ–≥–Ω–æ–∑: {self.config['n_steps_out']} —à–∞–≥–æ–≤ √ó {FORECAST_STEP_DAYS} –¥–Ω–µ–π = {total_forecast_days} –¥–Ω–µ–π")
    
    def setup_forecaster(self) -> NDVIForecaster:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç forecaster —Å –¥–∞–Ω–Ω—ã–º–∏.
        
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç NDVIForecaster
        """
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è forecaster...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        test_config = self.config.copy()
        test_config["start_date"] = self.config["test_start_date"]
        test_config["end_date"] = self.config["test_end_date"]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        temp_config_path = "temp_test_config.json"
        with open(temp_config_path, "w", encoding="utf-8") as f:
            json.dump(test_config, f, ensure_ascii=False, indent=2)
        
        try:
            # –°–æ–∑–¥–∞–µ–º forecaster —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            self.forecaster = NDVIForecaster(temp_config_path)
            
            print("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            self.forecaster.load_and_process_data()
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π data_manager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞
            coordinates = [tuple(coord) for coord in self.config["coordinates"]]
            self.data_manager = DataManager(coordinates)
            
            return self.forecaster
            
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_config_path):
                os.remove(temp_config_path)
    
    def load_trained_models(self) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ—Å–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
        if self.forecaster is None:
            raise ValueError("Forecaster –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –≤–µ—Å–æ–≤
        if not (os.path.exists(ORIGINAL_WEIGHTS_PATH) and os.path.exists(FILTERED_WEIGHTS_PATH)):
            raise FileNotFoundError(
                "–í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤ ndvi_ts_lstm.py"
            )
        
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞
        X, _, _, input_size = self.forecaster.data_manager.prepare_sequences(
            self.forecaster.merged_df, 
            self.forecaster.n_steps_in, 
            self.forecaster.n_steps_out
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        model_config = ModelConfig()
        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        
        model_original = LSTMModel(input_size, model_config).to(device)
        model_filtered = LSTMModel(input_size, model_config).to(device)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤
        model_original.load_state_dict(
            torch.load(ORIGINAL_WEIGHTS_PATH, map_location=device)
        )
        model_filtered.load_state_dict(
            torch.load(FILTERED_WEIGHTS_PATH, map_location=device)
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏
        model_original.eval()
        model_filtered.eval()
        
        self.forecaster.model_original = model_original
        self.forecaster.model_filtered = model_filtered
        
        print("‚úÖ –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
    
    def generate_forecast(self) -> Tuple[pd.DatetimeIndex, np.ndarray]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ NDVI –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Returns:
            –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π NDVI
        """
        if self.forecaster is None:
            raise ValueError("Forecaster –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print("üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        forecast_start = pd.Timestamp(self.config["test_end_date"]) + pd.Timedelta(days=FORECAST_STEP_DAYS)
        forecast_dates = pd.date_range(
            start=forecast_start,
            periods=self.config["n_steps_out"],
            freq=f'{FORECAST_STEP_DAYS}D'
        )
        
        print(f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑: {forecast_dates[0]} - {forecast_dates[-1]}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
        recent_data = self.forecaster.merged_df.tail(self.forecaster.n_steps_in).copy()
        
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        features = ['TempMin', 'TempMax', 'RelativeHumidity', 'Precipitation', 'NDVI_Smoothed']
        recent_scaled = self.forecaster.data_manager.scaler_x.fit_transform(
            recent_data[['TempMin', 'TempMax', 'RelativeHumidity', 'Precipitation']]
        )
        recent_ndvi_scaled = self.forecaster.data_manager.scaler_y_smoothed.transform(
            recent_data[['NDVI_Smoothed']]
        )
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ NDVI
        input_sequence = np.hstack([recent_scaled, recent_ndvi_scaled])
        input_tensor = torch.FloatTensor(input_sequence).unsqueeze(0)  # –î–æ–±–∞–≤–ª—è–µ–º batch dimension
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        with torch.no_grad():
            forecast_tensor = self.forecaster.model_filtered(input_tensor)
            forecast_scaled = forecast_tensor.cpu().numpy().flatten()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤ (–ø—Ä–æ—Å—Ç–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è)
        forecast_predictions = np.repeat(forecast_scaled[0], self.config["n_steps_out"])
        
        # –û–±—Ä–∞—Ç–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        forecast_ndvi = self.forecaster.data_manager.scaler_y_smoothed.inverse_transform(
            forecast_predictions.reshape(-1, 1)
        ).flatten()
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        print(f"üìä –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π NDVI:")
        print(f"   üìà –î–∏–∞–ø–∞–∑–æ–Ω: {forecast_ndvi.min():.3f} - {forecast_ndvi.max():.3f}")
        print(f"   üìä –°—Ä–µ–¥–Ω–µ–µ: {forecast_ndvi.mean():.3f}")
        print(f"   üìã –ó–Ω–∞—á–µ–Ω–∏—è: {[f'{v:.3f}' for v in forecast_ndvi]}")
        
        if forecast_ndvi.max() < 0:
            print("   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è NDVI –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ!")
        elif forecast_ndvi.max() > 0.3:
            print("   ‚úÖ –•–æ—Ä–æ—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç—Å—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        else:
            print("   ‚ö†Ô∏è  –ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è NDVI")
        
        return forecast_dates, forecast_ndvi
    
    def get_real_ndvi_for_dates(self, forecast_dates: pd.DatetimeIndex) -> Tuple[pd.DatetimeIndex, np.ndarray]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è NDVI –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        
        Args:
            forecast_dates: –î–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–∞—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π NDVI
        """
        if self.data_manager is None:
            raise ValueError("DataManager –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print("üõ∞Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π NDVI...")
        
        # –†–∞—Å—à–∏—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω: 30 –¥–Ω–µ–π –¥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ + –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞
        start_date = forecast_dates[0] - pd.Timedelta(days=30)
        end_date = forecast_dates[-1]
        
        print(f"üìÖ –ó–∞–ø—Ä–æ—Å —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {start_date.date()} - {end_date.date()}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NDVI –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
        real_ndvi_df = self.data_manager.get_ndvi_data(
            start_date.strftime('%Y-%m-%d'),
            end_date.strftime('%Y-%m-%d')
        )
        
        if real_ndvi_df.empty:
            print("‚ö†Ô∏è  –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö NDVI –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return pd.DatetimeIndex([]), np.array([])
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(real_ndvi_df)} —Ç–æ—á–µ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö NDVI")
        print(f"üìä –î–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {real_ndvi_df['NDVI'].min():.3f} - {real_ndvi_df['NDVI'].max():.3f}")
        
        return real_ndvi_df['Date'], real_ndvi_df['NDVI'].values
    
    def calculate_metrics(self, forecast_dates: pd.DatetimeIndex, forecast_values: np.ndarray,
                         real_dates: pd.DatetimeIndex, real_values: np.ndarray) -> Dict[str, Any]:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞.
        
        Args:
            forecast_dates: –î–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_values: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è NDVI
            real_dates: –î–∞—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            real_values: –†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è NDVI
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        print("üìä –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        forecast_df = pd.DataFrame({
            'Date': forecast_dates,
            'NDVI_Forecast': forecast_values
        })
        
        real_df = pd.DataFrame({
            'Date': real_dates,
            'NDVI_Real': real_values
        })
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–∞–º
        merged_df = pd.merge(forecast_df, real_df, on='Date', how='inner')
        
        if len(merged_df) == 0:
            print("‚ö†Ô∏è  –ù–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –¥–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫")
            return {
                'mae': float('nan'),
                'rmse': float('nan'),
                'r2': float('nan'),
                'matched_points': 0,
                'forecast_mean': np.mean(forecast_values),
                'real_mean': float('nan'),
                'forecast_range': (np.min(forecast_values), np.max(forecast_values)),
                'real_range': (float('nan'), float('nan'))
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        forecast_matched = merged_df['NDVI_Forecast'].values
        real_matched = merged_df['NDVI_Real'].values
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        mae = mean_absolute_error(real_matched, forecast_matched)
        rmse = np.sqrt(mean_squared_error(real_matched, forecast_matched))
        r2 = r2_score(real_matched, forecast_matched)
        
        metrics = {
            'mae': mae,
            'rmse': rmse,
            'r2': r2,
            'matched_points': len(merged_df),
            'forecast_mean': np.mean(forecast_values),
            'real_mean': np.mean(real_values),
            'forecast_range': (np.min(forecast_values), np.max(forecast_values)),
            'real_range': (np.min(real_values), np.max(real_values))
        }
        
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è {len(merged_df)} —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫:")
        print(f"   üéØ MAE: {mae:.4f}")
        print(f"   üéØ RMSE: {rmse:.4f}")
        print(f"   üéØ R¬≤: {r2:.4f}")
        
        return metrics
    
    def plot_comparison(self, forecast_dates: pd.DatetimeIndex, forecast: np.ndarray, 
                       real_dates: pd.DatetimeIndex, real: np.ndarray) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        
        Args:
            forecast_dates: –î–∞—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è NDVI
            real_dates: –î–∞—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            real: –†–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è NDVI
        """
        print("üìà –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        
        fig = go.Figure()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        forecast_start = forecast_dates[0]
        
        historical_mask = real_dates < forecast_start
        comparison_mask = real_dates >= forecast_start
        
        # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å–µ—Ä—ã–π —Ü–≤–µ—Ç)
        if np.any(historical_mask):
            fig.add_trace(go.Scatter(
                x=real_dates[historical_mask],
                y=real[historical_mask],
                mode='markers+lines',
                name='–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ',
                line=dict(color='gray', width=2),
                marker=dict(size=4, color='gray'),
                opacity=0.7
            ))
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞ (—Å–∏–Ω–∏–π)
        if np.any(comparison_mask):
            fig.add_trace(go.Scatter(
                x=real_dates[comparison_mask],
                y=real[comparison_mask],
                mode='markers+lines',
                name='–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)',
                line=dict(color='blue', width=3),
                marker=dict(size=6, color='blue')
            ))
        
        # –ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–∞—Å–Ω—ã–π)
        fig.add_trace(go.Scatter(
            x=forecast_dates,
            y=forecast,
            mode='markers+lines',
            name='–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏',
            line=dict(color='red', width=3),
            marker=dict(size=8, color='red', symbol='diamond')
        ))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
        fig.update_layout(
            title={
                'text': '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ NDVI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
                'x': 0.5,
                'font': {'size': 20}
            },
            xaxis_title='–î–∞—Ç–∞',
            yaxis_title='NDVI',
            hovermode='x unified',
            legend=dict(
                yanchor="top",
                y=0.99,
                xanchor="left",
                x=0.01
            ),
            width=1200,
            height=600
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞
        fig.add_hline(y=0, line_dash="dot", line_color="black", opacity=0.5)
        fig.add_hline(y=0.3, line_dash="dot", line_color="green", opacity=0.3, 
                     annotation_text="–ü–æ—Ä–æ–≥ –∑–¥–æ—Ä–æ–≤–æ–π —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", annotation_position="left")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∫ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        output_path = os.path.join(OUTPUT_DIR, "ndvi_forecast_comparison.png")
        fig.write_image(output_path, width=1200, height=600, scale=2)
        
        print(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {output_path}")
    
    def save_metrics(self, metrics: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª.
        
        Args:
            metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        output_path = os.path.join(OUTPUT_DIR, "forecast_metrics.json")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        full_metrics = {
            'timestamp': datetime.now().isoformat(),
            'config': self.config,
            'metrics': metrics
        }
        
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(full_metrics, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
    
    def run_full_test(self) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏."""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ò")
        print("=" * 60)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            self.setup_forecaster()
            self.load_trained_models()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            forecast_dates, forecast_values = self.generate_forecast()
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            real_dates, real_values = self.get_real_ndvi_for_dates(forecast_dates)
            
            # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
            metrics = self.calculate_metrics(
                forecast_dates, forecast_values,
                real_dates, real_values
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            self.plot_comparison(
                forecast_dates, forecast_values,
                real_dates, real_values
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.save_metrics(metrics)
            
            print("\n" + "=" * 60)
            print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {OUTPUT_DIR}/")
            print("=" * 60)
            
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            raise

# ===================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ NDVI...")
    
    try:
        tester = NDVIModelTester()
        tester.run_full_test()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
        raise

if __name__ == "__main__":
    main() 